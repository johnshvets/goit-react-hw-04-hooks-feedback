{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/common/Section.module.css","components/common/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","section","FeedBackOptions","options","onLeaveFeedback","buttonList","map","option","item","type","onClick","id","button","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","value","target","toLowerCase","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,WAAa,oCAAoC,KAAO,8BAA8B,OAAS,kC,kBCAjHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,gKCc9CC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASC,UAAWC,IAAEC,QAAtB,UACE,mBAAGF,UAAWC,IAAEH,MAAhB,SAAwBA,IACvBC,M,gBCmBUI,EAtBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oBAAIL,UAAWC,IAAEK,WAAjB,SACGF,EAAQG,KAAI,SAACC,GAAD,OACX,oBAAiBR,UAAWC,IAAEQ,KAA9B,SACE,wBACEC,KAAK,SACLC,QAASN,EACTO,GAAIJ,EACJR,UAAWC,IAAEY,OAJf,SAMGL,KAPIA,SCEAM,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC4B3BC,EA5BI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,6BACE,uCAAUJ,OAEZ,6BACE,0CAAaC,OAEf,6BACE,sCAASC,OAEX,6BACE,wCAAWC,OAEb,6BACE,oDAAuBC,EAAvB,aC+CSC,EAzDH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTN,EADS,KACHO,EADG,OAEcD,mBAAS,GAFvB,mBAETL,EAFS,KAEAO,EAFA,OAGMF,mBAAS,GAHf,mBAGTJ,EAHS,KAGJO,EAHI,KA6BVN,EARqB,SAACH,EAAMC,EAASC,GACzC,OAAOF,EAAOC,EAAUC,EAOZQ,CAAmBV,EAAMC,EAASC,GAC1CE,EALkC,SAACJ,EAAMG,GAC7C,OAAOQ,KAAKC,MAAc,IAAPZ,EAAcG,GAIRU,CAAgCb,EAAMG,GAEjE,OACE,gCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAhCgB,SAAC,GAAgB,IACjC0B,EADgC,EAAbC,OACJpB,GAAGqB,cAEV,SAAVF,GACFP,GAAQ,SAACU,GAAD,OAAeA,EAAY,KAGvB,YAAVH,GACFN,GAAW,SAACS,GAAD,OAAeA,EAAY,KAG1B,QAAVH,GACFL,GAAO,SAACQ,GAAD,OAAeA,EAAY,UAuBlC,cAAC,EAAD,CAASpC,MAAM,aAAf,SACa,IAAVsB,EACC,cAAC,EAAD,CAAcL,QAAQ,sBAEtB,cAAC,EAAD,CACEE,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,UC5CjBc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.325359e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonList\":\"FeedbackOptions_buttonList__2Nyxq\",\"item\":\"FeedbackOptions_item__2UlUv\",\"button\":\"FeedbackOptions_button__xwEs2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1TvWx\",\"title\":\"Section_title__fRNhv\"};","import PropTypes from \"prop-types\";\r\nimport s from \"./Section.module.css\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className={s.section}>\r\n    <b className={s.title}>{title}</b>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\n\r\nconst FeedBackOptions = ({ options, onLeaveFeedback }) => (\r\n  <ul className={s.buttonList}>\r\n    {options.map((option) => (\r\n      <li key={option} className={s.item}>\r\n        <button\r\n          type=\"button\"\r\n          onClick={onLeaveFeedback}\r\n          id={option}\r\n          className={s.button}\r\n        >\r\n          {option}\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nFeedBackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedBackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul>\r\n    <li>\r\n      <p>Good: {good}</p>\r\n    </li>\r\n    <li>\r\n      <p>Neutral: {neutral}</p>\r\n    </li>\r\n    <li>\r\n      <p>Bad: {bad}</p>\r\n    </li>\r\n    <li>\r\n      <p>Total: {total}</p>\r\n    </li>\r\n    <li>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Section from \"./components/common/Section\";\nimport FeedBackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = ({ target }) => {\n    const value = target.id.toLowerCase();\n\n    if (value === \"good\") {\n      setGood((prevState) => prevState + 1);\n    }\n\n    if (value === \"neutral\") {\n      setNeutral((prevState) => prevState + 1);\n    }\n\n    if (value === \"bad\") {\n      setBad((prevState) => prevState + 1);\n    }\n  };\n\n  const countTotalFeedback = (good, neutral, bad) => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = (good, total) => {\n    return Math.round((good * 100) / total);\n  };\n\n  const total = countTotalFeedback(good, neutral, bad);\n  const positivePercentage = countPositiveFeedbackPercentage(good, total);\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedBackOptions\n          options={[\"Good\", \"Neutral\", \"Bad\"]}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        )}\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}